Search.setIndex({"docnames": ["bibliography", "index", "reference/abc", "reference/all", "reference/asset", "reference/classes", "reference/data", "reference/enums", "reference/functions", "reference/generated/abc/fairseq2.gang.Gang", "reference/generated/classes/fairseq2.optim.lr_scheduler.CosineAnnealingLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.LRSchedulerBase", "reference/generated/classes/fairseq2.optim.lr_scheduler.MyleLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.NoamLR", "reference/generated/classes/fairseq2.optim.lr_scheduler.PolynomialDecayLR", "reference/generated/data/fairseq2.assets.AssetCard", "reference/generated/data/fairseq2.assets.AssetMetadataProvider", "reference/generated/data/fairseq2.assets.AssetStore", "reference/generated/data/fairseq2.data.ByteStreamError", "reference/generated/data/fairseq2.data.CString", "reference/generated/data/fairseq2.data.CollateOptionsOverride", "reference/generated/data/fairseq2.data.Collater", "reference/generated/data/fairseq2.data.DataPipeline", "reference/generated/data/fairseq2.data.DataPipelineBuilder", "reference/generated/data/fairseq2.data.DataPipelineError", "reference/generated/data/fairseq2.data.FileMapper", "reference/generated/data/fairseq2.data.PathLike", "reference/generated/data/fairseq2.data.RecordError", "reference/generated/data/fairseq2.data.StringLike", "reference/generated/data/fairseq2.data.VocabularyInfo", "reference/generated/data/fairseq2.data.get_last_failed_example", "reference/generated/data/fairseq2.data.is_string_like", "reference/generated/data/fairseq2.data.list_files", "reference/generated/data/fairseq2.data.read_sequence", "reference/generated/data/fairseq2.data.read_zipped_records", "reference/generated/data/fairseq2.data.text.read_text", "reference/generated/data_text/fairseq2.data.text.LineEnding", "reference/generated/data_text/fairseq2.data.text.SentencePieceDecoder", "reference/generated/data_text/fairseq2.data.text.SentencePieceEncoder", "reference/generated/data_text/fairseq2.data.text.SentencePieceModel", "reference/generated/data_text/fairseq2.data.text.StrSplitter", "reference/generated/data_text/fairseq2.data.text.StrToIntConverter", "reference/generated/data_text/fairseq2.data.text.StrToTensorConverter", "reference/generated/data_text/fairseq2.data.text.TextTokenDecoder", "reference/generated/data_text/fairseq2.data.text.TextTokenEncoder", "reference/generated/data_text/fairseq2.data.text.TextTokenizer", "reference/generated/data_text/fairseq2.data.text.vocab_info_from_sentencepiece", "reference/generated/enums/fairseq2.nn.transformer.TransformerNormOrder", "reference/generated/functions/fairseq2.nn.utils.mask.to_float_mask"], "filenames": ["bibliography.rst", "index.rst", "reference/abc.rst", "reference/all.rst", "reference/asset.rst", "reference/classes.rst", "reference/data.rst", "reference/enums.rst", "reference/functions.rst", "reference/generated/abc/fairseq2.gang.Gang.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.CosineAnnealingLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.LRSchedulerBase.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.MyleLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.NoamLR.rst", "reference/generated/classes/fairseq2.optim.lr_scheduler.PolynomialDecayLR.rst", "reference/generated/data/fairseq2.assets.AssetCard.rst", "reference/generated/data/fairseq2.assets.AssetMetadataProvider.rst", "reference/generated/data/fairseq2.assets.AssetStore.rst", "reference/generated/data/fairseq2.data.ByteStreamError.rst", "reference/generated/data/fairseq2.data.CString.rst", "reference/generated/data/fairseq2.data.CollateOptionsOverride.rst", "reference/generated/data/fairseq2.data.Collater.rst", "reference/generated/data/fairseq2.data.DataPipeline.rst", "reference/generated/data/fairseq2.data.DataPipelineBuilder.rst", "reference/generated/data/fairseq2.data.DataPipelineError.rst", "reference/generated/data/fairseq2.data.FileMapper.rst", "reference/generated/data/fairseq2.data.PathLike.rst", "reference/generated/data/fairseq2.data.RecordError.rst", "reference/generated/data/fairseq2.data.StringLike.rst", "reference/generated/data/fairseq2.data.VocabularyInfo.rst", "reference/generated/data/fairseq2.data.get_last_failed_example.rst", "reference/generated/data/fairseq2.data.is_string_like.rst", "reference/generated/data/fairseq2.data.list_files.rst", "reference/generated/data/fairseq2.data.read_sequence.rst", "reference/generated/data/fairseq2.data.read_zipped_records.rst", "reference/generated/data/fairseq2.data.text.read_text.rst", "reference/generated/data_text/fairseq2.data.text.LineEnding.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceDecoder.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceEncoder.rst", "reference/generated/data_text/fairseq2.data.text.SentencePieceModel.rst", "reference/generated/data_text/fairseq2.data.text.StrSplitter.rst", "reference/generated/data_text/fairseq2.data.text.StrToIntConverter.rst", "reference/generated/data_text/fairseq2.data.text.StrToTensorConverter.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenDecoder.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenEncoder.rst", "reference/generated/data_text/fairseq2.data.text.TextTokenizer.rst", "reference/generated/data_text/fairseq2.data.text.vocab_info_from_sentencepiece.rst", "reference/generated/enums/fairseq2.nn.transformer.TransformerNormOrder.rst", "reference/generated/functions/fairseq2.nn.utils.mask.to_float_mask.rst"], "titles": ["Bibliography", "fairseq2 documentation", "ABCs and Protocols", "All", "fairseq2.assets", "Classes", "fairseq2.data", "Enums", "Functions", "Gang", "CosineAnnealingLR", "LRSchedulerBase", "MyleLR", "NoamLR", "PolynomialDecayLR", "AssetCard", "AssetMetadataProvider", "AssetStore", "fairseq2.data.ByteStreamError", "CString", "CollateOptionsOverride", "Collater", "DataPipeline", "DataPipelineBuilder", "fairseq2.data.DataPipelineError", "FileMapper", "PathLike", "fairseq2.data.RecordError", "StringLike", "VocabularyInfo", "get_last_failed_example", "is_string_like", "list_files", "read_sequence", "read_zipped_records", "read_text", "LineEnding", "SentencePieceDecoder", "SentencePieceEncoder", "SentencePieceModel", "StrSplitter", "StrToIntConverter", "StrToTensorConverter", "TextTokenDecoder", "TextTokenEncoder", "TextTokenizer", "vocab_info_from_sentencepiece", "TransformerNormOrder", "to_float_mask"], "terms": {"lh17": [0, 10], "ilya": 0, "loshchilov": [0, 10], "frank": 0, "hutter": [0, 10], "sgdr": 0, "stochast": 0, "gradient": 0, "descent": 0, "warm": 0, "restart": [0, 10], "2017": 0, "arxiv": 0, "1608": 0, "03983": 0, "swo21": [0, 47], "sam": 0, "shleifer": [0, 47], "jason": 0, "weston": 0, "myle": [0, 12], "ott": [0, 12], "normform": 0, "improv": 0, "transform": [0, 47], "pretrain": 0, "extra": 0, "normal": [0, 47], "2021": 0, "url": 0, "http": 0, "org": 0, "ab": 0, "2110": 0, "09456": 0, "doi": 0, "10": [0, 6, 23, 41], "48550": 0, "vsp": [0, 13, 47], "17": [0, 13, 47], "ashish": 0, "vaswani": [0, 13, 47], "noam": [0, 12, 13], "shazeer": [0, 13], "niki": 0, "parmar": 0, "jakob": 0, "uszkoreit": 0, "llion": 0, "jone": 0, "aidan": 0, "n": 0, "gomez": 0, "lukasz": 0, "kaiser": 0, "illia": 0, "polosukhin": 0, "attent": 0, "i": [0, 1, 4, 6, 10, 11, 12, 13, 14, 21, 22, 23, 25, 27, 29, 31, 38, 44], "all": [0, 1, 4, 9, 10, 12, 14, 20, 21, 22, 23, 25, 32, 40], "you": [0, 6, 25], "need": [0, 21], "1706": 0, "03762": 0, "xyh": [0, 47], "20": [0, 47], "ruibin": 0, "xiong": [0, 47], "yunchang": 0, "yang": 0, "di": 0, "he": 0, "kai": 0, "zheng": 0, "shuxin": 0, "chen": 0, "xing": 0, "huishuai": 0, "zhang": 0, "yanyan": 0, "lan": 0, "liwei": 0, "wang": 0, "tie": 0, "yan": 0, "liu": 0, "On": 0, "layer": [0, 47], "architectur": 0, "2020": 0, "2002": 0, "04745": 0, "sequenc": [1, 10, 12, 14, 21, 22, 23, 29, 33, 37, 40, 43], "model": [1, 13, 37, 38, 46], "toolkit": 1, "allow": [1, 4, 21, 22], "research": 1, "develop": 1, "train": [1, 10, 12, 13, 14], "custom": 1, "translat": [1, 45], "summar": 1, "languag": [1, 45], "other": [1, 6], "content": [1, 25], "gener": [1, 45], "task": [1, 45], "data": [1, 4, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48], "asset": [1, 15, 16, 17], "bibliographi": 1, "provid": [4, 6, 16], "api": [4, 23], "load": [4, 10, 11, 12, 13, 14, 23], "differ": [4, 21, 45], "us": [4, 13, 14, 19, 20, 21, 22, 23, 25, 29, 45, 48], "from": [4, 6, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 37, 43], "A": [4, 21, 22, 25], "place": 4, "where": [4, 10, 38, 44], "ar": [4, 9, 45], "In": [4, 10, 13], "access": 4, "via": 4, "assetstor": 4, "multipl": [4, 20, 21], "By": 4, "default": [4, 40, 48], "look": [4, 6, 25], "up": [4, 21, 25], "follow": [4, 6, 21, 25, 32], "system": [4, 25], "share": [4, 22], "user": 4, "etc": 4, "thi": [4, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 23, 25], "can": [4, 6, 18, 22, 23, 25], "chang": 4, "environ": 4, "variabl": [4, 10, 11, 12, 13, 14], "fairseq2_asset_dir": 4, "onli": [4, 23, 40], "avail": 4, "config": 4, "fairseq2_user_asset_dir": 4, "To": 4, "regist": 4, "new": [4, 23], "implement": [4, 10, 12, 45], "assetmetadataprovid": 4, "add": 4, "them": [4, 6, 9, 23], "asset_stor": 4, "here": 4, "an": [4, 10, 11, 12, 13, 14, 15, 19, 22, 24, 25, 29], "exampl": [4, 6, 21, 22, 23, 40], "directori": [4, 25], "pathlib": 4, "import": 4, "path": [4, 25, 32], "fileassetmetadataprovid": 4, "my_dir": 4, "model_stor": 4, "metadata_provid": 4, "append": 4, "yaml": 4, "file": [4, 6, 18, 25, 32, 34, 35, 40], "contain": [4, 10, 11, 12, 13, 14, 15, 22], "inform": [4, 15, 45, 46], "about": [4, 10, 15], "instruct": 4, "util": [4, 48], "generic_load": 4, "modelload": 4, "how": [4, 20], "memori": [4, 23, 25, 45], "each": [4, 10, 12, 13, 14, 15, 21, 22, 23, 34, 47], "must": 4, "have": [4, 6, 21, 22], "2": [4, 6, 10, 21, 23, 40, 47], "mandatori": 4, "attribut": 4, "name": [4, 12, 15, 16, 17, 22, 25, 36, 40, 47], "checkpoint": 4, "identifi": 4, "uniqu": 4, "_across_": 4, "differen": 4, "llm": 4, "assetcard": [4, 17], "altern": 4, "one": [4, 35, 40], "call": [4, 10, 11, 12, 13, 14, 22, 23, 40, 41, 42], "get_metadata": [4, 16], "str": [4, 6, 15, 16, 17, 19, 20, 22, 23, 26, 28, 31, 37, 38, 40, 43, 44, 45], "get": [4, 25, 38, 44], "meta": 4, "given": [4, 25, 40, 41], "python": [6, 19, 22, 25], "build": 6, "c": 6, "datapipelin": [6, 23], "The": [6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 29, 32, 33, 37, 38, 40, 43, 44, 45, 48], "dataload": [6, 22, 40], "abl": 6, "leverag": 6, "sever": [6, 22, 23, 25], "thread": 6, "work": [6, 9], "around": [6, 22], "global": 6, "interpret": 6, "lock": 6, "limit": 6, "also": [6, 10, 22, 25], "better": 6, "perform": 6, "than": [6, 23], "pure": 6, "like": 6, "read_text": [6, 40], "tsv": [6, 40], "map": [6, 22, 23, 25, 40], "lambda": [6, 23, 40], "x": [6, 23, 40], "split": [6, 19, 40], "t": [6, 10, 12, 13, 14, 18, 40], "1": [6, 10, 11, 12, 13, 14, 20, 21, 23, 36, 38, 40, 47], "lower": 6, "filter": [6, 23], "len": 6, "function": [6, 23, 40, 41, 42], "item": [6, 15], "go": [6, 40], "through": 6, "pipelin": [6, 22, 23, 24, 35], "don": 6, "flat": 6, "tensor": [6, 9, 21, 37, 38, 42, 43, 44, 45, 48], "tupl": [6, 21], "dictionari": [6, 21, 22, 40], "oper": [6, 9, 22], "specifi": [6, 15, 16, 17, 20, 23, 25, 47], "specif": [6, 15, 21, 45], "input": [6, 9, 21, 23, 40], "notabl": 6, "datapipelinebuild": [6, 22, 32, 33, 34, 35], "ha": [6, 10, 23], "selector": [6, 20, 23], "argument": [6, 45], "choos": 6, "appli": [6, 20, 23, 47], "If": [6, 10, 12, 13, 14, 15, 21, 22, 23, 32, 45, 48], "3": [6, 13, 21, 23], "select": [6, 23], "third": 6, "foo": 6, "valu": [6, 10, 15, 21, 36, 47], "correspond": [6, 12, 13, 14, 40], "kei": [6, 15, 21, 22, 25], "nest": 6, "separ": [6, 23], "For": [6, 21, 25], "y": 6, "4": [6, 21], "z": 6, "5": [6, 13, 21, 23], "bar": 6, "6": 6, "refer": [6, 10, 13, 45], "accept": 6, "comma": 6, "list": [6, 19, 21, 23, 32, 38, 40, 44], "multipli": 6, "leav": 6, "unmodifi": 6, "helper": 6, "method": 6, "tool": 6, "token": [6, 29, 37, 38, 43, 44, 45], "convert": [6, 40, 48], "byte": [6, 25], "class": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "fairseq2": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "rank": 9, "size": [9, 23, 29, 42], "devic": [9, 38, 45], "sourc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "base": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47], "abc": [9, 11, 16, 17, 43, 44, 45], "repres": [9, 10, 11, 12, 13, 14, 17, 19, 29, 45], "set": 9, "process": [9, 23], "collect": 9, "paramet": [9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 32, 33, 37, 38, 40, 43, 44, 45, 48], "int": [9, 10, 12, 13, 14, 21, 23, 25, 29, 40, 41], "number": [9, 10, 12, 13, 14, 23, 38, 44], "part": [9, 23], "associ": [9, 10, 12, 13, 14, 45], "abstract": [9, 11, 16, 17, 43, 44, 45], "all_gath": 9, "output_tensor": 9, "input_tensor": 9, "gather": 9, "put": 9, "singl": [9, 21, 23], "output": 9, "accomod": 9, "element": [9, 29, 33], "current": [9, 10, 11, 12, 13, 14, 22, 23], "all_reduc": 9, "op": 9, "reduc": 9, "across": 9, "reduceoper": 9, "wise": 9, "as_process_group": 9, "return": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "group": [9, 10, 11, 12, 13, 14], "type": [9, 10, 15, 16, 17, 19, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48], "processgroup": 9, "barrier": 9, "synchron": 9, "close": 9, "destroi": 9, "final": [10, 12, 13, 14, 37, 38, 39], "optim": [10, 11, 12, 13, 14], "lr_schedul": [10, 11, 12, 13, 14], "cycle_len": 10, "num_warmup_step": [10, 12, 13, 14], "cycle_mul": 10, "0": [10, 12, 14, 21, 23, 38, 40, 47], "lr_mul": 10, "start_lr": [10, 12, 14], "final_lr": [10, 14], "last_epoch": [10, 11, 12, 13, 14], "verbos": [10, 11, 12, 13, 14], "fals": [10, 11, 12, 13, 14, 21, 22, 23, 35, 37, 38, 40, 45], "lrschedulerbas": [10, 12, 13, 14], "learn": [10, 11, 12, 13, 14], "rate": [10, 11, 12, 13, 14], "schedul": [10, 11, 12, 13, 14], "describ": [10, 13, 21, 29, 47], "dure": [10, 14], "warmup": [10, 12, 13, 14], "eta_t": [10, 12, 13, 14], "eta_": [10, 12, 13, 14], "frac": [10, 12, 13, 14], "t_": [10, 12, 13, 14], "after": [10, 13, 14, 47], "text": [10, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "co": 10, "pi": 10, "anneal": 10, "cycl": 10, "t_i": 10, "step": [10, 12, 13, 14], "taken": 10, "sinc": 10, "last": [10, 11, 12, 13, 14, 21, 23, 25], "total": [10, 14], "within": 10, "th": 10, "e": 10, "length": [10, 21], "cosin": 10, "effect": 10, "start": [10, 36, 47], "larg": [10, 23], "rel": [10, 25], "rapidli": 10, "decreas": [10, 12, 13, 14], "minimum": 10, "befor": 10, "being": [10, 23], "increas": [10, 12, 13, 14, 23], "again": 10, "pleas": 10, "paper": [10, 13], "more": [10, 23, 45], "detail": [10, 20, 23], "addit": 10, "origin": [10, 12, 21], "support": [10, 19], "phase": 10, "linearli": [10, 12, 13, 14], "first": [10, 12, 13, 14, 22, 40], "chainabl": [10, 12, 13, 14], "float": [10, 12, 14, 22, 48], "factor": 10, "grow": 10, "scale": [10, 12], "end": [10, 19, 22, 29], "initi": [10, 12, 14], "respect": [10, 12, 14], "index": [10, 12, 13, 14, 23, 29], "epoch": [10, 11, 12, 13, 14], "bool": [10, 12, 13, 14, 22, 23, 45], "true": [10, 12, 13, 14, 21, 22, 23, 31, 45], "print": [10, 12, 13, 14], "messag": [10, 12, 13, 14], "stdout": [10, 12, 13, 14], "updat": [10, 12, 13, 14], "get_last_lr": [10, 11, 12, 13, 14], "comput": [10, 11, 12, 13, 14], "load_state_dict": [10, 11, 12, 13, 14, 22], "state_dict": [10, 11, 12, 13, 14, 22, 23], "state": [10, 11, 12, 13, 14, 22, 23], "arg": [10, 11, 12, 13, 14], "dict": [10, 11, 12, 13, 14, 16, 21, 22, 25, 40], "should": [10, 11, 12, 13, 14, 15, 20], "object": [10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 25, 29, 39, 40, 41, 42], "print_lr": [10, 11, 12, 13, 14], "is_verbos": [10, 11, 12, 13, 14], "lr": [10, 11, 12, 13, 14], "none": [10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 25, 29, 32, 35, 36, 38, 39, 40, 42, 44, 45, 47, 48], "displai": [10, 11, 12, 13, 14], "It": [10, 11, 12, 13, 14, 22], "entri": [10, 11, 12, 13, 14, 40], "everi": [10, 11, 12, 13, 14, 23, 33], "self": [10, 11, 12, 13, 14, 23, 40, 41, 42], "__dict__": [10, 11, 12, 13, 14], "which": [10, 11, 12, 13, 14, 45], "_lrschedul": 11, "version": [12, 23], "noamlr": 12, "preserv": [12, 21], "min": [12, 13], "sqrt": [12, 13], "essenti": 12, "squar": [12, 13], "root": [12, 13, 25], "wa": [12, 21], "propos": 12, "fairseq": 12, "under": [12, 32], "inversesquarerootlr": 12, "thereaft": [12, 13, 14], "proportion": [12, 13], "invers": [12, 13], "section": 13, "et": [13, 47], "al": [13, 47], "author": 13, "dimension": 13, "commonli": 13, "second": [13, 40], "num_step": 14, "power": 14, "polynomi": 14, "decai": 14, "p": 14, "degre": 14, "includ": 14, "over": [14, 22], "expon": 14, "metadata": [15, 16], "hold": 15, "mutablemap": 15, "ani": [15, 16, 21, 22, 23, 25, 30, 33, 48], "held": 15, "card": [15, 17], "piec": 15, "deriv": 15, "field": 15, "doe": 15, "its": [15, 22], "check": 15, "recurs": [15, 32], "assetcardfield": 15, "clear_cach": 16, "clear": 16, "cach": [16, 25], "store": 17, "retrieve_card": 17, "retriev": 17, "except": [18, 24, 27], "rais": [18, 22, 24, 27], "when": [18, 21, 22, 24, 27], "dataset": [18, 27], "read": [18, 22, 23, 24, 25, 27, 33, 34, 35, 40], "": [19, 22, 23, 31, 38, 40, 41, 42, 44, 47], "immut": 19, "utf": 19, "8": [19, 23], "string": [19, 40], "zero": 19, "copi": 19, "marshal": 19, "between": [19, 45], "nativ": [19, 22], "code": 19, "lstrip": 19, "whitespac": 19, "begin": [19, 29, 47], "rstrip": 19, "sep": [19, 40], "word": 19, "delimit": 19, "strip": 19, "pad_valu": [20, 21, 23], "pad_to_multipl": [20, 21, 23], "overrid": [20, 21, 23], "collat": [20, 23], "creat": [20, 21, 22, 23, 40, 45], "batch": [20, 21, 23], "particular": 20, "column": [20, 21, 23, 40], "same": [20, 21, 22, 23, 25], "pad": [20, 21, 29], "idx": 20, "see": [20, 23], "syntax": [20, 23, 32], "concaten": [21, 22, 23], "dimens": 21, "otherwis": 21, "requir": 21, "made": 21, "long": 21, "enough": 21, "fit": 21, "longest": 21, "round": [21, 22], "is_rag": 21, "seq": [21, 33], "seq_len": 21, "shape": [21, 23, 38, 44, 48], "option": [21, 25, 32], "shortest": 21, "alwai": 21, "collateoptionsoverrid": 21, "__call__": [21, 25, 37, 38, 40, 41, 42, 43, 44], "iter": 22, "persist": 22, "disk": 22, "resum": 22, "later": 22, "twice": 22, "two": 22, "so": [22, 25], "behav": 22, "inconcist": 22, "__iter__": [22, 36, 47], "modifi": 22, "intern": 22, "safe": 22, "static": 22, "concat": 22, "strict": [22, 23], "restor": [22, 23], "previous": 22, "enforc": [22, 25], "match": [22, 23, 32], "reset": 22, "move": 22, "back": 22, "round_robin": 22, "stop_at_shortest": 22, "extract": 22, "robin": 22, "stop": 22, "reach": 22, "circl": 22, "finish": 22, "until": 22, "sampl": [22, 23], "weight": 22, "data_pipelin": 22, "desir": 22, "distribut": 22, "uniform": 22, "posit": 22, "pass": 22, "zip": [22, 34], "zip_to_shortest": 22, "flatten": 22, "disable_parallel": 22, "togeth": 22, "assign": 22, "sequenti": 22, "properti": [22, 38, 44], "is_broken": 22, "broken": 22, "futur": 22, "datapipelineerror": 22, "and_return": [23, 40], "max_num_warn": 23, "instanc": 23, "bucket": 23, "bucket_s": 23, "drop_remaind": 23, "combin": 23, "consecut": 23, "drop": 23, "case": 23, "fewer": 23, "bucket_by_length": 23, "similar": 23, "equival": 23, "predic": 23, "keep": [23, 40], "those": 23, "who": 23, "callabl": 23, "fn": 23, "num_parallel_cal": 23, "usag": [23, 40], "yield": 23, "12": 23, "15": 23, "result": 23, "core": 23, "b": 23, "11": 23, "13": 23, "thei": 23, "automat": 23, "chain": 23, "f1": 23, "f2": 23, "effici": 23, "colum": 23, "parallel": 23, "prefetch": 23, "num_exampl": 23, "background": 23, "while": [23, 24, 27, 45], "shard": 23, "shard_idx": 23, "num_shard": 23, "shuffl": 23, "shuffle_window": 23, "enabl": [23, 25], "fix": 23, "buffer": 23, "intermedi": 23, "randomli": 23, "replac": 23, "full": 23, "save": 23, "ensur": 23, "preemption": 23, "lost": 23, "significantli": 23, "time": 23, "disabl": 23, "skip": 23, "take": 23, "most": 23, "yield_from": 23, "error": 24, "occur": 24, "root_dir": 25, "cached_fd_count": 25, "slice": 25, "big_fil": 25, "txt": 25, "1024": 25, "48": 25, "offset": 25, "pathlik": [25, 32], "warn": 25, "happili": 25, "lru": 25, "especi": 25, "filenam": 25, "pars": [25, 41], "memoryblock": 25, "block": 25, "regular": 25, "filemapperoutput": 25, "alia": [26, 28], "union": [26, 28], "cstring": [26, 28, 31, 37, 38, 40, 43, 44], "o": 26, "corrupt": 27, "record": 27, "encount": 27, "unk_idx": 29, "bos_idx": 29, "eos_idx": 29, "pad_idx": 29, "vocabulari": [29, 45, 46], "symbol": [29, 45], "bo": 29, "eo": 29, "unknown": 29, "unk": 29, "typeguard": 31, "pathnam": [32, 34, 35, 39], "pattern": 32, "travers": 32, "stringlik": 32, "non": 32, "empti": 32, "fnmatch": 32, "archiv": 34, "encod": [35, 38, 44, 45], "line_end": 35, "lineend": 35, "infer": 35, "ltrim": 35, "rtrim": 35, "skip_empti": 35, "memory_map": 35, "block_siz": 35, "open": 35, "line": 35, "modul": [36, 47], "qualnam": [36, 47], "boundari": [36, 47], "enum": [36, 47], "classmethod": [36, 47], "member": [36, 47], "definit": [36, 47], "order": [36, 47], "revers": [37, 38], "texttokendecod": [37, 45], "token_indic": [37, 43], "indic": [37, 38, 40, 43, 44, 45], "decod": [37, 43, 45], "decode_from_token": [37, 43], "prefix_token": 38, "suffix_token": 38, "enable_sampl": 38, "nbest_siz": 38, "alpha": 38, "pin_memori": [38, 45], "texttokenencod": [38, 45], "encode_as_token": [38, 44], "prefix_indic": [38, 44], "prefix": [38, 44], "suffix_indic": [38, 44], "suffix": [38, 44], "control_symbol": 39, "exclud": 40, "charact": 40, "tab": 40, "Will": 40, "per": 40, "va": 40, "cc": 40, "BY": 40, "franc": 40, "tatoeba": 40, "en": [40, 45], "fr": 40, "integ": 41, "dtype": [42, 48], "vocab_info": 45, "vocabularyinfo": [45, 46], "create_decod": 45, "create_encod": 45, "lang": 45, "mode": 45, "valid": 45, "concret": 45, "subclass": 45, "typic": 45, "multi": 45, "job": 45, "distinguish": 45, "transcript": 45, "multilingu": 45, "u": 45, "de": 45, "target": 45, "construct": 45, "pin": 45, "create_raw_encod": 45, "raw": 45, "control": 45, "nn": [47, 48], "post": 47, "residu": 47, "connect": 47, "pre": 47, "pre_with_normform": 47, "mask": 48, "boolean": 48, "point": 48}, "objects": {"fairseq2.assets": [[15, 0, 1, "", "AssetCard"], [16, 0, 1, "", "AssetMetadataProvider"], [17, 0, 1, "", "AssetStore"]], "fairseq2.assets.AssetCard": [[15, 1, 1, "", "field"]], "fairseq2.assets.AssetMetadataProvider": [[16, 1, 1, "", "clear_cache"], [16, 1, 1, "", "get_metadata"]], "fairseq2.assets.AssetStore": [[17, 1, 1, "", "retrieve_card"]], "fairseq2.data": [[18, 2, 1, "", "ByteStreamError"], [19, 0, 1, "", "CString"], [20, 0, 1, "", "CollateOptionsOverride"], [21, 0, 1, "", "Collater"], [22, 0, 1, "", "DataPipeline"], [23, 0, 1, "", "DataPipelineBuilder"], [24, 2, 1, "", "DataPipelineError"], [25, 0, 1, "", "FileMapper"], [26, 4, 1, "", "PathLike"], [27, 2, 1, "", "RecordError"], [28, 4, 1, "", "StringLike"], [29, 0, 1, "", "VocabularyInfo"], [30, 6, 1, "", "get_last_failed_example"], [31, 6, 1, "", "is_string_like"], [32, 6, 1, "", "list_files"], [33, 6, 1, "", "read_sequence"], [34, 6, 1, "", "read_zipped_records"]], "fairseq2.data.CString": [[19, 1, 1, "", "lstrip"], [19, 1, 1, "", "rstrip"], [19, 1, 1, "", "split"], [19, 1, 1, "", "strip"]], "fairseq2.data.Collater": [[21, 1, 1, "", "__call__"]], "fairseq2.data.DataPipeline": [[22, 1, 1, "", "__iter__"], [22, 1, 1, "", "concat"], [22, 3, 1, "", "is_broken"], [22, 1, 1, "", "load_state_dict"], [22, 1, 1, "", "reset"], [22, 1, 1, "", "round_robin"], [22, 1, 1, "", "sample"], [22, 1, 1, "", "state_dict"], [22, 1, 1, "", "zip"]], "fairseq2.data.DataPipelineBuilder": [[23, 1, 1, "", "and_return"], [23, 1, 1, "", "bucket"], [23, 1, 1, "", "bucket_by_length"], [23, 1, 1, "", "collate"], [23, 1, 1, "", "filter"], [23, 1, 1, "", "map"], [23, 1, 1, "", "prefetch"], [23, 1, 1, "", "shard"], [23, 1, 1, "", "shuffle"], [23, 1, 1, "", "skip"], [23, 1, 1, "", "take"], [23, 1, 1, "", "yield_from"]], "fairseq2.data.FileMapper": [[25, 1, 1, "", "__call__"]], "fairseq2.data.VocabularyInfo": [[29, 5, 1, "", "bos_idx"], [29, 5, 1, "", "eos_idx"], [29, 5, 1, "", "pad_idx"], [29, 5, 1, "", "size"], [29, 5, 1, "", "unk_idx"]], "fairseq2.data.text": [[36, 0, 1, "", "LineEnding"], [37, 0, 1, "", "SentencePieceDecoder"], [38, 0, 1, "", "SentencePieceEncoder"], [39, 0, 1, "", "SentencePieceModel"], [40, 0, 1, "", "StrSplitter"], [41, 0, 1, "", "StrToIntConverter"], [42, 0, 1, "", "StrToTensorConverter"], [43, 0, 1, "", "TextTokenDecoder"], [44, 0, 1, "", "TextTokenEncoder"], [45, 0, 1, "", "TextTokenizer"], [35, 6, 1, "", "read_text"], [46, 6, 1, "", "vocab_info_from_sentencepiece"]], "fairseq2.data.text.LineEnding": [[36, 1, 1, "", "__iter__"]], "fairseq2.data.text.SentencePieceDecoder": [[37, 1, 1, "", "__call__"], [37, 1, 1, "", "decode_from_tokens"]], "fairseq2.data.text.SentencePieceEncoder": [[38, 1, 1, "", "__call__"], [38, 1, 1, "", "encode_as_tokens"], [38, 3, 1, "", "prefix_indices"], [38, 3, 1, "", "suffix_indices"]], "fairseq2.data.text.StrSplitter": [[40, 1, 1, "", "__call__"]], "fairseq2.data.text.StrToIntConverter": [[41, 1, 1, "", "__call__"]], "fairseq2.data.text.StrToTensorConverter": [[42, 1, 1, "", "__call__"]], "fairseq2.data.text.TextTokenDecoder": [[43, 1, 1, "", "__call__"], [43, 1, 1, "", "decode_from_tokens"]], "fairseq2.data.text.TextTokenEncoder": [[44, 1, 1, "", "__call__"], [44, 1, 1, "", "encode_as_tokens"], [44, 3, 1, "", "prefix_indices"], [44, 3, 1, "", "suffix_indices"]], "fairseq2.data.text.TextTokenizer": [[45, 1, 1, "", "create_decoder"], [45, 1, 1, "", "create_encoder"], [45, 1, 1, "", "create_raw_encoder"]], "fairseq2.gang": [[9, 0, 1, "", "Gang"]], "fairseq2.gang.Gang": [[9, 1, 1, "", "all_gather"], [9, 1, 1, "", "all_reduce"], [9, 1, 1, "", "as_process_group"], [9, 1, 1, "", "barrier"], [9, 1, 1, "", "close"]], "fairseq2.nn.transformer": [[47, 0, 1, "", "TransformerNormOrder"]], "fairseq2.nn.transformer.TransformerNormOrder": [[47, 5, 1, "", "POST"], [47, 5, 1, "", "PRE"], [47, 5, 1, "", "PRE_WITH_NORMFORMER"], [47, 1, 1, "", "__iter__"]], "fairseq2.nn.utils.mask": [[48, 6, 1, "", "to_float_mask"]], "fairseq2.optim.lr_scheduler": [[10, 0, 1, "", "CosineAnnealingLR"], [11, 0, 1, "", "LRSchedulerBase"], [12, 0, 1, "", "MyleLR"], [13, 0, 1, "", "NoamLR"], [14, 0, 1, "", "PolynomialDecayLR"]], "fairseq2.optim.lr_scheduler.CosineAnnealingLR": [[10, 1, 1, "", "get_last_lr"], [10, 1, 1, "", "load_state_dict"], [10, 1, 1, "", "print_lr"], [10, 1, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.LRSchedulerBase": [[11, 1, 1, "", "get_last_lr"], [11, 1, 1, "", "load_state_dict"], [11, 1, 1, "", "print_lr"], [11, 1, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.MyleLR": [[12, 1, 1, "", "get_last_lr"], [12, 1, 1, "", "load_state_dict"], [12, 1, 1, "", "print_lr"], [12, 1, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.NoamLR": [[13, 1, 1, "", "get_last_lr"], [13, 1, 1, "", "load_state_dict"], [13, 1, 1, "", "print_lr"], [13, 1, 1, "", "state_dict"]], "fairseq2.optim.lr_scheduler.PolynomialDecayLR": [[14, 1, 1, "", "get_last_lr"], [14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "print_lr"], [14, 1, 1, "", "state_dict"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:exception", "3": "py:property", "4": "py:data", "5": "py:attribute", "6": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "exception", "Python exception"], "3": ["py", "property", "Python property"], "4": ["py", "data", "Python data"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"]}, "titleterms": {"bibliographi": 0, "fairseq2": [1, 4, 6, 18, 24, 27], "document": 1, "refer": 1, "misc": 1, "abc": [2, 3], "protocol": [2, 3], "all": 3, "class": [3, 5, 6], "enum": [3, 7], "function": [3, 8], "asset": 4, "model": 4, "store": 4, "card": 4, "data": [6, 18, 24, 27], "column": 6, "syntax": 6, "public": 6, "us": 6, "api": 6, "text": 6, "gang": 9, "cosineannealinglr": 10, "lrschedulerbas": 11, "mylelr": 12, "noamlr": 13, "polynomialdecaylr": 14, "assetcard": 15, "assetmetadataprovid": 16, "assetstor": 17, "bytestreamerror": 18, "cstring": 19, "collateoptionsoverrid": 20, "collat": 21, "datapipelin": 22, "datapipelinebuild": 23, "datapipelineerror": 24, "filemapp": 25, "pathlik": 26, "recorderror": 27, "stringlik": 28, "vocabularyinfo": 29, "get_last_failed_exampl": 30, "is_string_lik": 31, "list_fil": 32, "read_sequ": 33, "read_zipped_record": 34, "read_text": 35, "lineend": 36, "sentencepiecedecod": 37, "sentencepieceencod": 38, "sentencepiecemodel": 39, "strsplitter": 40, "strtointconvert": 41, "strtotensorconvert": 42, "texttokendecod": 43, "texttokenencod": 44, "texttoken": 45, "vocab_info_from_sentencepiec": 46, "transformernormord": 47, "to_float_mask": 48}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Bibliography": [[0, "bibliography"]], "fairseq2 documentation": [[1, "fairseq2-documentation"]], "fairseq2 Reference": [[1, null]], "Misc": [[1, null]], "ABCs and Protocols": [[2, "abcs-and-protocols"], [3, "abcs-and-protocols"]], "All": [[3, "all"]], "Classes": [[3, "classes"], [5, "classes"]], "Enums": [[3, "enums"], [7, "enums"]], "Functions": [[3, "functions"], [8, "functions"]], "fairseq2.assets": [[4, "fairseq2-assets"]], "Model store": [[4, "model-store"]], "Model card": [[4, "model-card"]], "fairseq2.data": [[6, "fairseq2-data"]], "Column syntax": [[6, "column-syntax"]], "Public classes used in fairseq2 API:": [[6, "public-classes-used-in-fairseq2-api"]], "fairseq2.data.text": [[6, "fairseq2-data-text"]], "Gang": [[9, "gang"]], "CosineAnnealingLR": [[10, "cosineannealinglr"]], "LRSchedulerBase": [[11, "lrschedulerbase"]], "MyleLR": [[12, "mylelr"]], "NoamLR": [[13, "noamlr"]], "PolynomialDecayLR": [[14, "polynomialdecaylr"]], "AssetCard": [[15, "assetcard"]], "AssetMetadataProvider": [[16, "assetmetadataprovider"]], "AssetStore": [[17, "assetstore"]], "fairseq2.data.ByteStreamError": [[18, "fairseq2-data-bytestreamerror"]], "CString": [[19, "cstring"]], "CollateOptionsOverride": [[20, "collateoptionsoverride"]], "Collater": [[21, "collater"]], "DataPipeline": [[22, "datapipeline"]], "DataPipelineBuilder": [[23, "datapipelinebuilder"]], "fairseq2.data.DataPipelineError": [[24, "fairseq2-data-datapipelineerror"]], "FileMapper": [[25, "filemapper"]], "PathLike": [[26, "pathlike"]], "fairseq2.data.RecordError": [[27, "fairseq2-data-recorderror"]], "StringLike": [[28, "stringlike"]], "VocabularyInfo": [[29, "vocabularyinfo"]], "get_last_failed_example": [[30, "get-last-failed-example"]], "is_string_like": [[31, "is-string-like"]], "list_files": [[32, "list-files"]], "read_sequence": [[33, "read-sequence"]], "read_zipped_records": [[34, "read-zipped-records"]], "read_text": [[35, "read-text"]], "LineEnding": [[36, "lineending"]], "SentencePieceDecoder": [[37, "sentencepiecedecoder"]], "SentencePieceEncoder": [[38, "sentencepieceencoder"]], "SentencePieceModel": [[39, "sentencepiecemodel"]], "StrSplitter": [[40, "strsplitter"]], "StrToIntConverter": [[41, "strtointconverter"]], "StrToTensorConverter": [[42, "strtotensorconverter"]], "TextTokenDecoder": [[43, "texttokendecoder"]], "TextTokenEncoder": [[44, "texttokenencoder"]], "TextTokenizer": [[45, "texttokenizer"]], "vocab_info_from_sentencepiece": [[46, "vocab-info-from-sentencepiece"]], "TransformerNormOrder": [[47, "transformernormorder"]], "to_float_mask": [[48, "to-float-mask"]]}, "indexentries": {"gang (class in fairseq2.gang)": [[9, "fairseq2.gang.Gang"]], "all_gather() (fairseq2.gang.gang method)": [[9, "fairseq2.gang.Gang.all_gather"]], "all_reduce() (fairseq2.gang.gang method)": [[9, "fairseq2.gang.Gang.all_reduce"]], "as_process_group() (fairseq2.gang.gang method)": [[9, "fairseq2.gang.Gang.as_process_group"]], "barrier() (fairseq2.gang.gang method)": [[9, "fairseq2.gang.Gang.barrier"]], "close() (fairseq2.gang.gang method)": [[9, "fairseq2.gang.Gang.close"]], "cosineannealinglr (class in fairseq2.optim.lr_scheduler)": [[10, "fairseq2.optim.lr_scheduler.CosineAnnealingLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[10, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[10, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[10, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.cosineannealinglr method)": [[10, "fairseq2.optim.lr_scheduler.CosineAnnealingLR.state_dict"]], "lrschedulerbase (class in fairseq2.optim.lr_scheduler)": [[11, "fairseq2.optim.lr_scheduler.LRSchedulerBase"]], "get_last_lr() (fairseq2.optim.lr_scheduler.lrschedulerbase method)": [[11, "fairseq2.optim.lr_scheduler.LRSchedulerBase.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.lrschedulerbase method)": [[11, "fairseq2.optim.lr_scheduler.LRSchedulerBase.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.lrschedulerbase method)": [[11, "fairseq2.optim.lr_scheduler.LRSchedulerBase.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.lrschedulerbase method)": [[11, "fairseq2.optim.lr_scheduler.LRSchedulerBase.state_dict"]], "mylelr (class in fairseq2.optim.lr_scheduler)": [[12, "fairseq2.optim.lr_scheduler.MyleLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.mylelr method)": [[12, "fairseq2.optim.lr_scheduler.MyleLR.state_dict"]], "noamlr (class in fairseq2.optim.lr_scheduler)": [[13, "fairseq2.optim.lr_scheduler.NoamLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.noamlr method)": [[13, "fairseq2.optim.lr_scheduler.NoamLR.state_dict"]], "polynomialdecaylr (class in fairseq2.optim.lr_scheduler)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR"]], "get_last_lr() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.get_last_lr"]], "load_state_dict() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.load_state_dict"]], "print_lr() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.print_lr"]], "state_dict() (fairseq2.optim.lr_scheduler.polynomialdecaylr method)": [[14, "fairseq2.optim.lr_scheduler.PolynomialDecayLR.state_dict"]], "assetcard (class in fairseq2.assets)": [[15, "fairseq2.assets.AssetCard"]], "field() (fairseq2.assets.assetcard method)": [[15, "fairseq2.assets.AssetCard.field"]], "assetmetadataprovider (class in fairseq2.assets)": [[16, "fairseq2.assets.AssetMetadataProvider"]], "clear_cache() (fairseq2.assets.assetmetadataprovider method)": [[16, "fairseq2.assets.AssetMetadataProvider.clear_cache"]], "get_metadata() (fairseq2.assets.assetmetadataprovider method)": [[16, "fairseq2.assets.AssetMetadataProvider.get_metadata"]], "assetstore (class in fairseq2.assets)": [[17, "fairseq2.assets.AssetStore"]], "retrieve_card() (fairseq2.assets.assetstore method)": [[17, "fairseq2.assets.AssetStore.retrieve_card"]], "bytestreamerror": [[18, "fairseq2.data.ByteStreamError"]], "cstring (class in fairseq2.data)": [[19, "fairseq2.data.CString"]], "lstrip() (fairseq2.data.cstring method)": [[19, "fairseq2.data.CString.lstrip"]], "rstrip() (fairseq2.data.cstring method)": [[19, "fairseq2.data.CString.rstrip"]], "split() (fairseq2.data.cstring method)": [[19, "fairseq2.data.CString.split"]], "strip() (fairseq2.data.cstring method)": [[19, "fairseq2.data.CString.strip"]], "collateoptionsoverride (class in fairseq2.data)": [[20, "fairseq2.data.CollateOptionsOverride"]], "collater (class in fairseq2.data)": [[21, "fairseq2.data.Collater"]], "__call__() (fairseq2.data.collater method)": [[21, "fairseq2.data.Collater.__call__"]], "datapipeline (class in fairseq2.data)": [[22, "fairseq2.data.DataPipeline"]], "__iter__() (fairseq2.data.datapipeline method)": [[22, "fairseq2.data.DataPipeline.__iter__"]], "concat() (fairseq2.data.datapipeline static method)": [[22, "fairseq2.data.DataPipeline.concat"]], "is_broken (fairseq2.data.datapipeline property)": [[22, "fairseq2.data.DataPipeline.is_broken"]], "load_state_dict() (fairseq2.data.datapipeline method)": [[22, "fairseq2.data.DataPipeline.load_state_dict"]], "reset() (fairseq2.data.datapipeline method)": [[22, "fairseq2.data.DataPipeline.reset"]], "round_robin() (fairseq2.data.datapipeline static method)": [[22, "fairseq2.data.DataPipeline.round_robin"]], "sample() (fairseq2.data.datapipeline static method)": [[22, "fairseq2.data.DataPipeline.sample"]], "state_dict() (fairseq2.data.datapipeline method)": [[22, "fairseq2.data.DataPipeline.state_dict"]], "zip() (fairseq2.data.datapipeline static method)": [[22, "fairseq2.data.DataPipeline.zip"]], "datapipelinebuilder (class in fairseq2.data)": [[23, "fairseq2.data.DataPipelineBuilder"]], "and_return() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.and_return"]], "bucket() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.bucket"]], "bucket_by_length() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.bucket_by_length"]], "collate() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.collate"]], "filter() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.filter"]], "map() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.map"]], "prefetch() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.prefetch"]], "shard() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.shard"]], "shuffle() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.shuffle"]], "skip() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.skip"]], "take() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.take"]], "yield_from() (fairseq2.data.datapipelinebuilder method)": [[23, "fairseq2.data.DataPipelineBuilder.yield_from"]], "datapipelineerror": [[24, "fairseq2.data.DataPipelineError"]], "filemapper (class in fairseq2.data)": [[25, "fairseq2.data.FileMapper"]], "__call__() (fairseq2.data.filemapper method)": [[25, "fairseq2.data.FileMapper.__call__"]], "pathlike (in module fairseq2.data)": [[26, "fairseq2.data.PathLike"]], "recorderror": [[27, "fairseq2.data.RecordError"]], "stringlike (in module fairseq2.data)": [[28, "fairseq2.data.StringLike"]], "vocabularyinfo (class in fairseq2.data)": [[29, "fairseq2.data.VocabularyInfo"]], "bos_idx (fairseq2.data.vocabularyinfo attribute)": [[29, "fairseq2.data.VocabularyInfo.bos_idx"]], "eos_idx (fairseq2.data.vocabularyinfo attribute)": [[29, "fairseq2.data.VocabularyInfo.eos_idx"]], "pad_idx (fairseq2.data.vocabularyinfo attribute)": [[29, "fairseq2.data.VocabularyInfo.pad_idx"]], "size (fairseq2.data.vocabularyinfo attribute)": [[29, "fairseq2.data.VocabularyInfo.size"]], "unk_idx (fairseq2.data.vocabularyinfo attribute)": [[29, "fairseq2.data.VocabularyInfo.unk_idx"]], "get_last_failed_example() (in module fairseq2.data)": [[30, "fairseq2.data.get_last_failed_example"]], "is_string_like() (in module fairseq2.data)": [[31, "fairseq2.data.is_string_like"]], "list_files() (in module fairseq2.data)": [[32, "fairseq2.data.list_files"]], "read_sequence() (in module fairseq2.data)": [[33, "fairseq2.data.read_sequence"]], "read_zipped_records() (in module fairseq2.data)": [[34, "fairseq2.data.read_zipped_records"]], "read_text() (in module fairseq2.data.text)": [[35, "fairseq2.data.text.read_text"]], "lineending (class in fairseq2.data.text)": [[36, "fairseq2.data.text.LineEnding"]], "__iter__() (fairseq2.data.text.lineending class method)": [[36, "fairseq2.data.text.LineEnding.__iter__"]], "sentencepiecedecoder (class in fairseq2.data.text)": [[37, "fairseq2.data.text.SentencePieceDecoder"]], "__call__() (fairseq2.data.text.sentencepiecedecoder method)": [[37, "fairseq2.data.text.SentencePieceDecoder.__call__"]], "decode_from_tokens() (fairseq2.data.text.sentencepiecedecoder method)": [[37, "fairseq2.data.text.SentencePieceDecoder.decode_from_tokens"]], "sentencepieceencoder (class in fairseq2.data.text)": [[38, "fairseq2.data.text.SentencePieceEncoder"]], "__call__() (fairseq2.data.text.sentencepieceencoder method)": [[38, "fairseq2.data.text.SentencePieceEncoder.__call__"]], "encode_as_tokens() (fairseq2.data.text.sentencepieceencoder method)": [[38, "fairseq2.data.text.SentencePieceEncoder.encode_as_tokens"]], "prefix_indices (fairseq2.data.text.sentencepieceencoder property)": [[38, "fairseq2.data.text.SentencePieceEncoder.prefix_indices"]], "suffix_indices (fairseq2.data.text.sentencepieceencoder property)": [[38, "fairseq2.data.text.SentencePieceEncoder.suffix_indices"]], "sentencepiecemodel (class in fairseq2.data.text)": [[39, "fairseq2.data.text.SentencePieceModel"]], "strsplitter (class in fairseq2.data.text)": [[40, "fairseq2.data.text.StrSplitter"]], "__call__() (fairseq2.data.text.strsplitter method)": [[40, "fairseq2.data.text.StrSplitter.__call__"]], "strtointconverter (class in fairseq2.data.text)": [[41, "fairseq2.data.text.StrToIntConverter"]], "__call__() (fairseq2.data.text.strtointconverter method)": [[41, "fairseq2.data.text.StrToIntConverter.__call__"]], "strtotensorconverter (class in fairseq2.data.text)": [[42, "fairseq2.data.text.StrToTensorConverter"]], "__call__() (fairseq2.data.text.strtotensorconverter method)": [[42, "fairseq2.data.text.StrToTensorConverter.__call__"]], "texttokendecoder (class in fairseq2.data.text)": [[43, "fairseq2.data.text.TextTokenDecoder"]], "__call__() (fairseq2.data.text.texttokendecoder method)": [[43, "fairseq2.data.text.TextTokenDecoder.__call__"]], "decode_from_tokens() (fairseq2.data.text.texttokendecoder method)": [[43, "fairseq2.data.text.TextTokenDecoder.decode_from_tokens"]], "texttokenencoder (class in fairseq2.data.text)": [[44, "fairseq2.data.text.TextTokenEncoder"]], "__call__() (fairseq2.data.text.texttokenencoder method)": [[44, "fairseq2.data.text.TextTokenEncoder.__call__"]], "encode_as_tokens() (fairseq2.data.text.texttokenencoder method)": [[44, "fairseq2.data.text.TextTokenEncoder.encode_as_tokens"]], "prefix_indices (fairseq2.data.text.texttokenencoder property)": [[44, "fairseq2.data.text.TextTokenEncoder.prefix_indices"]], "suffix_indices (fairseq2.data.text.texttokenencoder property)": [[44, "fairseq2.data.text.TextTokenEncoder.suffix_indices"]], "texttokenizer (class in fairseq2.data.text)": [[45, "fairseq2.data.text.TextTokenizer"]], "create_decoder() (fairseq2.data.text.texttokenizer method)": [[45, "fairseq2.data.text.TextTokenizer.create_decoder"]], "create_encoder() (fairseq2.data.text.texttokenizer method)": [[45, "fairseq2.data.text.TextTokenizer.create_encoder"]], "create_raw_encoder() (fairseq2.data.text.texttokenizer method)": [[45, "fairseq2.data.text.TextTokenizer.create_raw_encoder"]], "vocab_info_from_sentencepiece() (in module fairseq2.data.text)": [[46, "fairseq2.data.text.vocab_info_from_sentencepiece"]], "post (fairseq2.nn.transformer.transformernormorder attribute)": [[47, "fairseq2.nn.transformer.TransformerNormOrder.POST"]], "pre (fairseq2.nn.transformer.transformernormorder attribute)": [[47, "fairseq2.nn.transformer.TransformerNormOrder.PRE"]], "pre_with_normformer (fairseq2.nn.transformer.transformernormorder attribute)": [[47, "fairseq2.nn.transformer.TransformerNormOrder.PRE_WITH_NORMFORMER"]], "transformernormorder (class in fairseq2.nn.transformer)": [[47, "fairseq2.nn.transformer.TransformerNormOrder"]], "__iter__() (fairseq2.nn.transformer.transformernormorder class method)": [[47, "fairseq2.nn.transformer.TransformerNormOrder.__iter__"]], "to_float_mask() (in module fairseq2.nn.utils.mask)": [[48, "fairseq2.nn.utils.mask.to_float_mask"]]}})